version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: voltx_postgres_prod
    environment:
      POSTGRES_DB: voltx_db
      POSTGRES_USER: voltx_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - voltx_network_prod
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: voltx_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
    networks:
      - voltx_network_prod
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: voltx_elasticsearch_prod
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data_prod:/usr/share/elasticsearch/data
    networks:
      - voltx_network_prod
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: voltx_backend_prod
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://voltx_user:${POSTGRES_PASSWORD}@postgres:5432/voltx_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - postgres
      - redis
      - elasticsearch
    networks:
      - voltx_network_prod
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: voltx_frontend_prod
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${API_URL}
    depends_on:
      - backend
    networks:
      - voltx_network_prod
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: voltx_nginx_prod
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - voltx_network_prod
    restart: unless-stopped

volumes:
  postgres_data_prod:
  redis_data_prod:
  elasticsearch_data_prod:

networks:
  voltx_network_prod:
    driver: bridge