name: Production Deployment

on:
  push:
    branches: [ production ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Production Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        script: |
          # Create log file with timestamp
          LOG_FILE="/var/www/deployment-logs/deploy-$(date +%Y%m%d-%H%M%S).log"
          mkdir -p /var/www/deployment-logs
          
          echo "=== Deployment Started at $(date) ===" | tee -a $LOG_FILE
          
          # Navigate to project directory
          cd /var/www/Voltx-E-commerce || { echo "Failed to navigate to project directory" | tee -a $LOG_FILE; exit 1; }
          
          # Pull latest changes from production branch
          echo "Pulling latest changes..." | tee -a $LOG_FILE
          git fetch origin production 2>&1 | tee -a $LOG_FILE
          git reset --hard origin/production 2>&1 | tee -a $LOG_FILE
          
          # Function to log errors
          log_error() {
            echo "ERROR: $1 at $(date)" | tee -a $LOG_FILE
          }
          
          # Function to log success
          log_success() {
            echo "SUCCESS: $1 at $(date)" | tee -a $LOG_FILE
          }
          
          # Install dependencies and Build Backend
          echo "Installing backend dependencies..." | tee -a $LOG_FILE
          cd /var/www/Voltx-E-commerce/backend
          if bun install 2>&1 | tee -a $LOG_FILE; then
            log_success "Backend dependencies installed"
          else
            log_error "Backend dependencies installation failed"
            exit 1
          fi
          
          echo "Building backend..." | tee -a $LOG_FILE
          if bun run build:full 2>&1 | tee -a $LOG_FILE; then
            log_success "Backend build completed"
          else
            log_error "Backend build failed"
            exit 1
          fi
          
          # Install dependencies and Build Frontend Admin
          echo "Installing frontend admin dependencies..." | tee -a $LOG_FILE
          cd /var/www/Voltx-E-commerce/frontend/admin
          if bun install 2>&1 | tee -a $LOG_FILE; then
            log_success "Frontend admin dependencies installed"
          else
            log_error "Frontend admin dependencies installation failed"
            exit 1
          fi
          
          echo "Building frontend admin..." | tee -a $LOG_FILE
          if bun run build:full 2>&1 | tee -a $LOG_FILE; then
            log_success "Frontend admin build completed"
          else
            log_error "Frontend admin build failed"
            exit 1
          fi
          
          # Install dependencies and Build Frontend Main
          echo "Installing frontend main dependencies..." | tee -a $LOG_FILE
          cd /var/www/Voltx-E-commerce/frontend/main
          if bun install 2>&1 | tee -a $LOG_FILE; then
            log_success "Frontend main dependencies installed"
          else
            log_error "Frontend main dependencies installation failed"
            exit 1
          fi
          
          echo "Building frontend main..." | tee -a $LOG_FILE
          if bun run build:full 2>&1 | tee -a $LOG_FILE; then
            log_success "Frontend main build completed"
          else
            log_error "Frontend main build failed"
            exit 1
          fi
          
          # Install dependencies and Build Frontend Cashier
          echo "Installing frontend cashier dependencies..." | tee -a $LOG_FILE
          cd /var/www/Voltx-E-commerce/frontend/cashier
          if bun install 2>&1 | tee -a $LOG_FILE; then
            log_success "Frontend cashier dependencies installed"
          else
            log_error "Frontend cashier dependencies installation failed"
            exit 1
          fi
          
          echo "Building frontend cashier..." | tee -a $LOG_FILE
          if bun run build:full 2>&1 | tee -a $LOG_FILE; then
            log_success "Frontend cashier build completed"
          else
            log_error "Frontend cashier build failed - Please add build:full script to package.json"
            exit 1
          fi
          
          # Restart PM2 processes
          echo "Restarting PM2 processes..." | tee -a $LOG_FILE
          if pm2 restart all 2>&1 | tee -a $LOG_FILE; then
            log_success "PM2 processes restarted"
          else
            log_error "PM2 restart failed"
          fi
          
          # Check PM2 status
          echo "PM2 Status:" | tee -a $LOG_FILE
          pm2 status 2>&1 | tee -a $LOG_FILE
          
          # Restart Nginx
          echo "Restarting Nginx..." | tee -a $LOG_FILE
          if sudo systemctl restart nginx 2>&1 | tee -a $LOG_FILE; then
            log_success "Nginx restarted"
          else
            log_error "Nginx restart failed"
          fi
          
          # Check Nginx status
          echo "Nginx Status:" | tee -a $LOG_FILE
          sudo systemctl status nginx --no-pager 2>&1 | tee -a $LOG_FILE
          
          # Test if services are running
          echo "Testing service availability..." | tee -a $LOG_FILE
          
          # Test if backend is responding (adjust port as needed)
          if curl -f http://localhost:3000/health 2>/dev/null; then
            log_success "Backend service is responding"
          else
            log_error "Backend service is not responding"
          fi
          
          # Test if nginx is serving content
          if curl -f http://localhost 2>/dev/null; then
            log_success "Nginx is serving content"
          else
            log_error "Nginx is not serving content"
          fi
          
          echo "=== Deployment Completed at $(date) ===" | tee -a $LOG_FILE
          
          # Keep only last 10 deployment logs
          cd /var/www/deployment-logs
          ls -t deploy-*.log | tail -n +11 | xargs rm -f 2>/dev/null || true
          
          echo "Deployment log saved to: $LOG_FILE"